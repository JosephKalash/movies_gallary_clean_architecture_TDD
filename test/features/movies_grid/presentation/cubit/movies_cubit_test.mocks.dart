// Mocks generated by Mockito 5.0.3 from annotations
// in movies_gallery/test/features/movies_grid/presentation/cubit/movies_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies_gallery/core/error/failures.dart' as _i6;
import 'package:movies_gallery/features/movies_grid/domain/entites/movie.dart'
    as _i7;
import 'package:movies_gallery/features/movies_grid/domain/repositories/movies_repository.dart'
    as _i2;
import 'package:movies_gallery/features/movies_grid/domain/usecases/get_movies_usecase.dart'
    as _i4;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeMovieRepository extends _i1.Fake implements _i2.MovieRepository {}

class _FakeEither<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovies extends _i1.Mock implements _i4.GetMovies {
  MockGetMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get movieRepository =>
      (super.noSuchMethod(Invocation.getter(#movieRepository),
          returnValue: _FakeMovieRepository()) as _i2.MovieRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Movie>>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
              returnValue:
                  Future.value(_FakeEither<_i6.Failure, List<_i7.Movie>>()))
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Movie>>>);
}
